/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ChessInterface extends utils.Interface {
  functions: {
    "betting()": FunctionFragment;
    "boardState()": FunctionFragment;
    "checkBishopValidMoves(uint256,uint8,uint32,bool)": FunctionFragment;
    "checkEndgame()": FunctionFragment;
    "checkForCheck(uint256,uint32)": FunctionFragment;
    "checkKingValidMoves(uint256,uint8,uint32,bool)": FunctionFragment;
    "checkKnightValidMoves(uint256,uint8,uint32,bool)": FunctionFragment;
    "checkMove(uint16)": FunctionFragment;
    "checkPawnValidMoves(uint256,uint8,uint32,uint32,bool)": FunctionFragment;
    "checkQueenValidMoves(uint256,uint8,uint32,bool)": FunctionFragment;
    "checkRookValidMoves(uint256,uint8,uint32,bool)": FunctionFragment;
    "commitMove(uint256,uint8,uint8)": FunctionFragment;
    "convertToCircuit()": FunctionFragment;
    "gameIndex()": FunctionFragment;
    "gameStateLists(uint16,uint256)": FunctionFragment;
    "getHorizontalMovement(uint8,uint8)": FunctionFragment;
    "getInBetweenMask(uint8,uint8)": FunctionFragment;
    "getPositionMask(uint8)": FunctionFragment;
    "getVerticalMovement(uint8,uint8)": FunctionFragment;
    "initializeGame()": FunctionFragment;
    "leelaColor()": FunctionFragment;
    "leelaTurn()": FunctionFragment;
    "moveIndex()": FunctionFragment;
    "pieceAtPosition(uint256,uint8)": FunctionFragment;
    "pieceUnderAttack(uint256,uint8)": FunctionFragment;
    "playMove(uint16)": FunctionFragment;
    "searchPiece(uint256,uint32,uint32,uint8,uint16,uint16)": FunctionFragment;
    "setBetting(address)": FunctionFragment;
    "setPosition(uint256,uint8,uint8)": FunctionFragment;
    "verifyExecuteBishopMove(uint256,uint8,uint8,bool)": FunctionFragment;
    "verifyExecuteKingMove(uint256,uint8,uint8,bool,uint32)": FunctionFragment;
    "verifyExecuteKnightMove(uint256,uint8,uint8,bool)": FunctionFragment;
    "verifyExecutePawnMove(uint256,uint16,bool,uint32,uint32)": FunctionFragment;
    "verifyExecuteQueenMove(uint256,uint8,uint8,bool)": FunctionFragment;
    "verifyExecuteRookMove(uint256,uint8,uint8,bool)": FunctionFragment;
    "zeroPosition(uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "betting"
      | "boardState"
      | "checkBishopValidMoves"
      | "checkEndgame"
      | "checkForCheck"
      | "checkKingValidMoves"
      | "checkKnightValidMoves"
      | "checkMove"
      | "checkPawnValidMoves"
      | "checkQueenValidMoves"
      | "checkRookValidMoves"
      | "commitMove"
      | "convertToCircuit"
      | "gameIndex"
      | "gameStateLists"
      | "getHorizontalMovement"
      | "getInBetweenMask"
      | "getPositionMask"
      | "getVerticalMovement"
      | "initializeGame"
      | "leelaColor"
      | "leelaTurn"
      | "moveIndex"
      | "pieceAtPosition"
      | "pieceUnderAttack"
      | "playMove"
      | "searchPiece"
      | "setBetting"
      | "setPosition"
      | "verifyExecuteBishopMove"
      | "verifyExecuteKingMove"
      | "verifyExecuteKnightMove"
      | "verifyExecutePawnMove"
      | "verifyExecuteQueenMove"
      | "verifyExecuteRookMove"
      | "zeroPosition"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "betting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boardState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkBishopValidMoves",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkEndgame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkForCheck",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkKingValidMoves",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkKnightValidMoves",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMove",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPawnValidMoves",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkQueenValidMoves",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRookValidMoves",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitMove",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToCircuit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameStateLists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHorizontalMovement",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInBetweenMask",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMask",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerticalMovement",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leelaColor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leelaTurn", values?: undefined): string;
  encodeFunctionData(functionFragment: "moveIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pieceAtPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceUnderAttack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "playMove",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "searchPiece",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExecuteBishopMove",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExecuteKingMove",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExecuteKnightMove",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExecutePawnMove",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExecuteQueenMove",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExecuteRookMove",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zeroPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "betting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boardState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkBishopValidMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkEndgame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkForCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkKingValidMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkKnightValidMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPawnValidMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkQueenValidMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRookValidMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToCircuit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameStateLists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHorizontalMovement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInBetweenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerticalMovement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leelaColor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leelaTurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pieceAtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pieceUnderAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "searchPiece",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBetting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyExecuteBishopMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyExecuteKingMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyExecuteKnightMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyExecutePawnMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyExecuteQueenMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyExecuteRookMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroPosition",
    data: BytesLike
  ): Result;

  events: {
    "check()": EventFragment;
    "movePlayed(uint256,uint256,uint256,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "check"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "movePlayed"): EventFragment;
}

export interface checkEventObject {}
export type checkEvent = TypedEvent<[], checkEventObject>;

export type checkEventFilter = TypedEventFilter<checkEvent>;

export interface movePlayedEventObject {
  gameState: BigNumber;
  leela_state: BigNumber;
  world_state: BigNumber;
  leelaColor: boolean;
  leelaMove: boolean;
}
export type movePlayedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean, boolean],
  movePlayedEventObject
>;

export type movePlayedEventFilter = TypedEventFilter<movePlayedEvent>;

export interface Chess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    betting(overrides?: CallOverrides): Promise<[string]>;

    boardState(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkBishopValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkEndgame(overrides?: CallOverrides): Promise<[number]>;

    checkForCheck(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkKingValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkKnightValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkPawnValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkQueenValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkRookValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commitMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newGameState: BigNumber }>;

    convertToCircuit(overrides?: CallOverrides): Promise<[BigNumber[][][]]>;

    gameIndex(overrides?: CallOverrides): Promise<[number]>;

    gameStateLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHorizontalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getInBetweenMask(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionMask(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVerticalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initializeGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leelaColor(overrides?: CallOverrides): Promise<[boolean]>;

    leelaTurn(overrides?: CallOverrides): Promise<[boolean]>;

    moveIndex(overrides?: CallOverrides): Promise<[number]>;

    pieceAtPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    pieceUnderAttack(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    searchPiece(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<BigNumberish>,
      pBitOffset: PromiseOrValue<BigNumberish>,
      bitSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setBetting(
      _betting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      piece: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyExecuteBishopMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyExecuteKingMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { newGameState: BigNumber; newPlayerState: number }
    >;

    verifyExecuteKnightMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyExecutePawnMove(
      gameState: PromiseOrValue<BigNumberish>,
      move: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { newGameState: BigNumber; newPlayerState: number }
    >;

    verifyExecuteQueenMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyExecuteRookMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zeroPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  betting(overrides?: CallOverrides): Promise<string>;

  boardState(overrides?: CallOverrides): Promise<BigNumber>;

  checkBishopValidMoves(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkEndgame(overrides?: CallOverrides): Promise<number>;

  checkForCheck(
    gameState: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkKingValidMoves(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkKnightValidMoves(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkMove(
    move: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkPawnValidMoves(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    opponentState: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkQueenValidMoves(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkRookValidMoves(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commitMove(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToCircuit(overrides?: CallOverrides): Promise<BigNumber[][][]>;

  gameIndex(overrides?: CallOverrides): Promise<number>;

  gameStateLists(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHorizontalMovement(
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getInBetweenMask(
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionMask(
    pos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVerticalMovement(
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  initializeGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leelaColor(overrides?: CallOverrides): Promise<boolean>;

  leelaTurn(overrides?: CallOverrides): Promise<boolean>;

  moveIndex(overrides?: CallOverrides): Promise<number>;

  pieceAtPosition(
    gameState: PromiseOrValue<BigNumberish>,
    pos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  pieceUnderAttack(
    gameState: PromiseOrValue<BigNumberish>,
    pos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playMove(
    move: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  searchPiece(
    gameState: PromiseOrValue<BigNumberish>,
    playerState: PromiseOrValue<BigNumberish>,
    opponentState: PromiseOrValue<BigNumberish>,
    color: PromiseOrValue<BigNumberish>,
    pBitOffset: PromiseOrValue<BigNumberish>,
    bitSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setBetting(
    _betting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPosition(
    gameState: PromiseOrValue<BigNumberish>,
    pos: PromiseOrValue<BigNumberish>,
    piece: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyExecuteBishopMove(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyExecuteKingMove(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    playerState: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { newGameState: BigNumber; newPlayerState: number }
  >;

  verifyExecuteKnightMove(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyExecutePawnMove(
    gameState: PromiseOrValue<BigNumberish>,
    move: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    playerState: PromiseOrValue<BigNumberish>,
    opponentState: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { newGameState: BigNumber; newPlayerState: number }
  >;

  verifyExecuteQueenMove(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyExecuteRookMove(
    gameState: PromiseOrValue<BigNumberish>,
    fromPos: PromiseOrValue<BigNumberish>,
    toPos: PromiseOrValue<BigNumberish>,
    currentTurnBlack: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  zeroPosition(
    gameState: PromiseOrValue<BigNumberish>,
    pos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    betting(overrides?: CallOverrides): Promise<string>;

    boardState(overrides?: CallOverrides): Promise<BigNumber>;

    checkBishopValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkEndgame(overrides?: CallOverrides): Promise<number>;

    checkForCheck(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkKingValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkKnightValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkPawnValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkQueenValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkRookValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commitMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToCircuit(overrides?: CallOverrides): Promise<BigNumber[][][]>;

    gameIndex(overrides?: CallOverrides): Promise<number>;

    gameStateLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHorizontalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getInBetweenMask(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionMask(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerticalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    initializeGame(overrides?: CallOverrides): Promise<void>;

    leelaColor(overrides?: CallOverrides): Promise<boolean>;

    leelaTurn(overrides?: CallOverrides): Promise<boolean>;

    moveIndex(overrides?: CallOverrides): Promise<number>;

    pieceAtPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    pieceUnderAttack(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    searchPiece(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<BigNumberish>,
      pBitOffset: PromiseOrValue<BigNumberish>,
      bitSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBetting(
      _betting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      piece: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteBishopMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteKingMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { newGameState: BigNumber; newPlayerState: number }
    >;

    verifyExecuteKnightMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecutePawnMove(
      gameState: PromiseOrValue<BigNumberish>,
      move: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { newGameState: BigNumber; newPlayerState: number }
    >;

    verifyExecuteQueenMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteRookMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeroPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "check()"(): checkEventFilter;
    check(): checkEventFilter;

    "movePlayed(uint256,uint256,uint256,bool,bool)"(
      gameState?: null,
      leela_state?: null,
      world_state?: null,
      leelaColor?: null,
      leelaMove?: null
    ): movePlayedEventFilter;
    movePlayed(
      gameState?: null,
      leela_state?: null,
      world_state?: null,
      leelaColor?: null,
      leelaMove?: null
    ): movePlayedEventFilter;
  };

  estimateGas: {
    betting(overrides?: CallOverrides): Promise<BigNumber>;

    boardState(overrides?: CallOverrides): Promise<BigNumber>;

    checkBishopValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkEndgame(overrides?: CallOverrides): Promise<BigNumber>;

    checkForCheck(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkKingValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkKnightValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPawnValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkQueenValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRookValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToCircuit(overrides?: CallOverrides): Promise<BigNumber>;

    gameIndex(overrides?: CallOverrides): Promise<BigNumber>;

    gameStateLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHorizontalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInBetweenMask(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionMask(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerticalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leelaColor(overrides?: CallOverrides): Promise<BigNumber>;

    leelaTurn(overrides?: CallOverrides): Promise<BigNumber>;

    moveIndex(overrides?: CallOverrides): Promise<BigNumber>;

    pieceAtPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pieceUnderAttack(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    searchPiece(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<BigNumberish>,
      pBitOffset: PromiseOrValue<BigNumberish>,
      bitSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBetting(
      _betting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      piece: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteBishopMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteKingMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteKnightMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecutePawnMove(
      gameState: PromiseOrValue<BigNumberish>,
      move: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteQueenMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExecuteRookMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeroPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    betting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boardState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkBishopValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkEndgame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkForCheck(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkKingValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkKnightValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPawnValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkQueenValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRookValidMoves(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToCircuit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameStateLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHorizontalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInBetweenMask(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionMask(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerticalMovement(
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leelaColor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leelaTurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pieceAtPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pieceUnderAttack(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    searchPiece(
      gameState: PromiseOrValue<BigNumberish>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<BigNumberish>,
      pBitOffset: PromiseOrValue<BigNumberish>,
      bitSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBetting(
      _betting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      piece: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExecuteBishopMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExecuteKingMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExecuteKnightMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExecutePawnMove(
      gameState: PromiseOrValue<BigNumberish>,
      move: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      playerState: PromiseOrValue<BigNumberish>,
      opponentState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExecuteQueenMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExecuteRookMove(
      gameState: PromiseOrValue<BigNumberish>,
      fromPos: PromiseOrValue<BigNumberish>,
      toPos: PromiseOrValue<BigNumberish>,
      currentTurnBlack: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zeroPosition(
      gameState: PromiseOrValue<BigNumberish>,
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
