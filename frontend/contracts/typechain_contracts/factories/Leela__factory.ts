/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Leela, LeelaInterface } from "../Leela";

const _abi = [
  {
    inputs: [],
    name: "getMove",
    outputs: [
      {
        internalType: "uint16",
        name: "move",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeLeela",
    outputs: [
      {
        internalType: "uint16[]",
        name: "array",
        type: "uint16[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ace08841461003b578063b9c1b0f514610059575b600080fd5b610043610077565b604051610050919061014d565b60405180910390f35b61006161007c565b60405161006e919061017e565b60405180910390f35b606090565b600090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061ffff82169050919050565b6100c4816100ad565b82525050565b60006100d683836100bb565b60208301905092915050565b6000602082019050919050565b60006100fa82610081565b610104818561008c565b935061010f8361009d565b8060005b8381101561014057815161012788826100ca565b9750610132836100e2565b925050600181019050610113565b5085935050505092915050565b6000602082019050818103600083015261016781846100ef565b905092915050565b610178816100ad565b82525050565b6000602082019050610193600083018461016f565b9291505056fea2646970667358221220461841cf7fcf7f3cb37a4efbed554fad4f494f565e48a85a6b3789b850bc11cd64736f6c63430008110033";

type LeelaConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LeelaConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Leela__factory extends ContractFactory {
  constructor(...args: LeelaConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Leela> {
    return super.deploy(overrides || {}) as Promise<Leela>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Leela {
    return super.attach(address) as Leela;
  }
  override connect(signer: Signer): Leela__factory {
    return super.connect(signer) as Leela__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LeelaInterface {
    return new utils.Interface(_abi) as LeelaInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Leela {
    return new Contract(address, _abi, signerOrProvider) as Leela;
  }
}
