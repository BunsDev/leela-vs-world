/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BettingInterface extends utils.Interface {
  functions: {
    "accountsPayable(address)": FunctionFragment;
    "addStake(bool)": FunctionFragment;
    "callTimerOver()": FunctionFragment;
    "chess()": FunctionFragment;
    "claimPayout()": FunctionFragment;
    "gameIndex()": FunctionFragment;
    "getWorldMove()": FunctionFragment;
    "initVal()": FunctionFragment;
    "leela()": FunctionFragment;
    "leelaColor()": FunctionFragment;
    "leelaMove()": FunctionFragment;
    "leelaPoolSize()": FunctionFragment;
    "leelaShares(uint16,address)": FunctionFragment;
    "leelaStakes(uint16,address)": FunctionFragment;
    "minStake()": FunctionFragment;
    "moveIndex()": FunctionFragment;
    "movesToVotes(uint16,uint16,uint16)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setChess(address)": FunctionFragment;
    "setLeela(address)": FunctionFragment;
    "setMinStake(uint256)": FunctionFragment;
    "setPoolSize(uint256)": FunctionFragment;
    "setVotePeriod(uint256)": FunctionFragment;
    "totalLeelaShares()": FunctionFragment;
    "totalWorldShares()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votePeriodDuration()": FunctionFragment;
    "votePeriodEnd()": FunctionFragment;
    "voteWorldMove(uint16)": FunctionFragment;
    "voters(uint16,uint16,address)": FunctionFragment;
    "votersList(uint16,uint256)": FunctionFragment;
    "votersMap(uint16,address)": FunctionFragment;
    "worldPoolSize()": FunctionFragment;
    "worldShares(uint16,address)": FunctionFragment;
    "worldStakes(uint16,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountsPayable"
      | "addStake"
      | "callTimerOver"
      | "chess"
      | "claimPayout"
      | "gameIndex"
      | "getWorldMove"
      | "initVal"
      | "leela"
      | "leelaColor"
      | "leelaMove"
      | "leelaPoolSize"
      | "leelaShares"
      | "leelaStakes"
      | "minStake"
      | "moveIndex"
      | "movesToVotes"
      | "owner"
      | "renounceOwnership"
      | "setChess"
      | "setLeela"
      | "setMinStake"
      | "setPoolSize"
      | "setVotePeriod"
      | "totalLeelaShares"
      | "totalWorldShares"
      | "transferOwnership"
      | "votePeriodDuration"
      | "votePeriodEnd"
      | "voteWorldMove"
      | "voters"
      | "votersList"
      | "votersMap"
      | "worldPoolSize"
      | "worldShares"
      | "worldStakes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountsPayable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "callTimerOver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chess", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimPayout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWorldMove",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initVal", values?: undefined): string;
  encodeFunctionData(functionFragment: "leela", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "leelaColor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leelaMove", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "leelaPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leelaShares",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "leelaStakes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "minStake", values?: undefined): string;
  encodeFunctionData(functionFragment: "moveIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "movesToVotes",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChess",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeela",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLeelaShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWorldShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votePeriodEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteWorldMove",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votersList",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votersMap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "worldPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldShares",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "worldStakes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountsPayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callTimerOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorldMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initVal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leela", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leelaColor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leelaMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leelaPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leelaShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leelaStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "movesToVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setChess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLeela", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLeelaShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWorldShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePeriodEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteWorldMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votersList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votersMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "worldPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldStakes",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "gameEnd(bool)": EventFragment;
    "gameStart(bool)": EventFragment;
    "movePlayed(uint16,uint16)": EventFragment;
    "stakeMade(address,bool)": EventFragment;
    "voteMade(address,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "gameEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "gameStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "movePlayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "stakeMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "voteMade"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface gameEndEventObject {
  leelaWon: boolean;
}
export type gameEndEvent = TypedEvent<[boolean], gameEndEventObject>;

export type gameEndEventFilter = TypedEventFilter<gameEndEvent>;

export interface gameStartEventObject {
  leelaColor: boolean;
}
export type gameStartEvent = TypedEvent<[boolean], gameStartEventObject>;

export type gameStartEventFilter = TypedEventFilter<gameStartEvent>;

export interface movePlayedEventObject {
  worldMove: number;
  leelaMove: number;
}
export type movePlayedEvent = TypedEvent<
  [number, number],
  movePlayedEventObject
>;

export type movePlayedEventFilter = TypedEventFilter<movePlayedEvent>;

export interface stakeMadeEventObject {
  player: string;
  leelaSide: boolean;
}
export type stakeMadeEvent = TypedEvent<
  [string, boolean],
  stakeMadeEventObject
>;

export type stakeMadeEventFilter = TypedEventFilter<stakeMadeEvent>;

export interface voteMadeEventObject {
  player: string;
  move: number;
}
export type voteMadeEvent = TypedEvent<[string, number], voteMadeEventObject>;

export type voteMadeEventFilter = TypedEventFilter<voteMadeEvent>;

export interface Betting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BettingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountsPayable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addStake(
      leelaSide: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callTimerOver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chess(overrides?: CallOverrides): Promise<[string]>;

    claimPayout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameIndex(overrides?: CallOverrides): Promise<[number]>;

    getWorldMove(overrides?: CallOverrides): Promise<[number]>;

    initVal(overrides?: CallOverrides): Promise<[BigNumber]>;

    leela(overrides?: CallOverrides): Promise<[string]>;

    leelaColor(overrides?: CallOverrides): Promise<[boolean]>;

    leelaMove(overrides?: CallOverrides): Promise<[number]>;

    leelaPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    leelaShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    leelaStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    moveIndex(overrides?: CallOverrides): Promise<[number]>;

    movesToVotes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChess(
      _chess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLeela(
      _leela: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolSize(
      _a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotePeriod(
      d: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalLeelaShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWorldShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votePeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    votePeriodEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteWorldMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    votersList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    votersMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    worldPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    worldShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    worldStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accountsPayable(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addStake(
    leelaSide: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callTimerOver(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chess(overrides?: CallOverrides): Promise<string>;

  claimPayout(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameIndex(overrides?: CallOverrides): Promise<number>;

  getWorldMove(overrides?: CallOverrides): Promise<number>;

  initVal(overrides?: CallOverrides): Promise<BigNumber>;

  leela(overrides?: CallOverrides): Promise<string>;

  leelaColor(overrides?: CallOverrides): Promise<boolean>;

  leelaMove(overrides?: CallOverrides): Promise<number>;

  leelaPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  leelaShares(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  leelaStakes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minStake(overrides?: CallOverrides): Promise<BigNumber>;

  moveIndex(overrides?: CallOverrides): Promise<number>;

  movesToVotes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChess(
    _chess: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLeela(
    _leela: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinStake(
    _minStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolSize(
    _a: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotePeriod(
    d: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalLeelaShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalWorldShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  votePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

  voteWorldMove(
    move: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  votersList(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  votersMap(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  worldPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  worldShares(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  worldStakes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accountsPayable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStake(
      leelaSide: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    callTimerOver(overrides?: CallOverrides): Promise<void>;

    chess(overrides?: CallOverrides): Promise<string>;

    claimPayout(overrides?: CallOverrides): Promise<void>;

    gameIndex(overrides?: CallOverrides): Promise<number>;

    getWorldMove(overrides?: CallOverrides): Promise<number>;

    initVal(overrides?: CallOverrides): Promise<BigNumber>;

    leela(overrides?: CallOverrides): Promise<string>;

    leelaColor(overrides?: CallOverrides): Promise<boolean>;

    leelaMove(overrides?: CallOverrides): Promise<number>;

    leelaPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    leelaShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leelaStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minStake(overrides?: CallOverrides): Promise<BigNumber>;

    moveIndex(overrides?: CallOverrides): Promise<number>;

    movesToVotes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setChess(
      _chess: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLeela(
      _leela: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolSize(
      _a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotePeriod(
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalLeelaShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalWorldShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    votePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    votePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    voteWorldMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    votersList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    votersMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    worldPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    worldShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "gameEnd(bool)"(leelaWon?: null): gameEndEventFilter;
    gameEnd(leelaWon?: null): gameEndEventFilter;

    "gameStart(bool)"(leelaColor?: null): gameStartEventFilter;
    gameStart(leelaColor?: null): gameStartEventFilter;

    "movePlayed(uint16,uint16)"(
      worldMove?: null,
      leelaMove?: null
    ): movePlayedEventFilter;
    movePlayed(worldMove?: null, leelaMove?: null): movePlayedEventFilter;

    "stakeMade(address,bool)"(
      player?: null,
      leelaSide?: null
    ): stakeMadeEventFilter;
    stakeMade(player?: null, leelaSide?: null): stakeMadeEventFilter;

    "voteMade(address,uint16)"(player?: null, move?: null): voteMadeEventFilter;
    voteMade(player?: null, move?: null): voteMadeEventFilter;
  };

  estimateGas: {
    accountsPayable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStake(
      leelaSide: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callTimerOver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chess(overrides?: CallOverrides): Promise<BigNumber>;

    claimPayout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getWorldMove(overrides?: CallOverrides): Promise<BigNumber>;

    initVal(overrides?: CallOverrides): Promise<BigNumber>;

    leela(overrides?: CallOverrides): Promise<BigNumber>;

    leelaColor(overrides?: CallOverrides): Promise<BigNumber>;

    leelaMove(overrides?: CallOverrides): Promise<BigNumber>;

    leelaPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    leelaShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leelaStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minStake(overrides?: CallOverrides): Promise<BigNumber>;

    moveIndex(overrides?: CallOverrides): Promise<BigNumber>;

    movesToVotes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChess(
      _chess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLeela(
      _leela: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolSize(
      _a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotePeriod(
      d: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalLeelaShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalWorldShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    votePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    voteWorldMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votersList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votersMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    worldShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountsPayable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStake(
      leelaSide: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callTimerOver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimPayout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWorldMove(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initVal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leela(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leelaColor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leelaMove(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leelaPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leelaShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leelaStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    movesToVotes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChess(
      _chess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLeela(
      _leela: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolSize(
      _a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotePeriod(
      d: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalLeelaShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWorldShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votePeriodDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePeriodEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteWorldMove(
      move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votersList(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votersMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worldShares(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldStakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
