/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Leela, LeelaInterface } from "../../../contracts/leela.sol/Leela";

const _abi = [
  {
    inputs: [],
    name: "getMove",
    outputs: [
      {
        internalType: "uint16",
        name: "move",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeLeela",
    outputs: [
      {
        internalType: "uint16[]",
        name: "array",
        type: "uint16[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ea8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80634ace0884146037578063b9c1b0f514604d575b600080fd5b606060405160449190609e565b60405180910390f35b604051600081526020016044565b60006064825190565b80845260209384019383018060005b83811015609357815161ffff168752602096870196909101906001016073565b509495945050505050565b6020808252810160ad8184605b565b939250505056fea26469706673582212200eb663484c8091e09c4d4873626dcd253eadb3890e31b1f6aaf957f5bb9de05b64736f6c63430008110033";

type LeelaConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LeelaConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Leela__factory extends ContractFactory {
  constructor(...args: LeelaConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Leela> {
    return super.deploy(overrides || {}) as Promise<Leela>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Leela {
    return super.attach(address) as Leela;
  }
  override connect(signer: Signer): Leela__factory {
    return super.connect(signer) as Leela__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LeelaInterface {
    return new utils.Interface(_abi) as LeelaInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Leela {
    return new Contract(address, _abi, signerOrProvider) as Leela;
  }
}
