use halo2_base::halo2_proofs::{arithmetic::FieldExt, circuit::Value};

use halo2_machinelearning::{
    felt_from_i64,
    nn_ops::{
        matrix_ops::linear::{
            batchnorm::BatchnormChipParams, conv::Conv3DLayerParams,
            dist_add_fixed::DistributedAddFixedChipParams,
        },
        vector_ops::linear::fc::FcParams,
    },
};
use json::JsonValue;
use ndarray::Array;

use crate::{
    conv_block::ConvBlockChipParams, policy_head::PolicyHeadChipParams,
    residual_block::ResidualBlockChipParams, squeeze_excitation::SqueezeExcitationBlockChipParams,
    LeelaParams,
};

pub const GATHER_MAP: [usize; 1858] = [
    896, 960, 1024, 1088, 1152, 1216, 1280, 0, 448, 3648, 64, 3584, 512, 128, 576, 192, 640, 256, 704, 320, 768, 384, 832, 2696, 904, 968, 1032, 1096,
    1160, 1224, 3144, 8, 456, 3656, 4040, 72, 3592, 520, 136, 584, 200, 648, 264, 712, 328, 776, 392, 2768, 2704, 912, 976, 1040, 1104, 1168, 3984,
    3152, 16, 464, 3664, 3216, 4048, 80, 3600, 528, 144, 592, 208, 656, 272, 720, 336, 400, 2840, 2776, 2712, 920, 984, 1048, 1112, 3992, 3160, 24,
    472, 3672, 3224, 4056, 88, 3608, 536, 3288, 152, 600, 216, 664, 280, 344, 408, 2912, 2848, 2784, 2720, 928, 992, 1056, 4000, 3168, 32, 480, 3680,
    3232, 4064, 96, 3616, 544, 3296, 160, 608, 3360, 224, 288, 352, 416, 2984, 2920, 2856, 2792, 2728, 936, 1000, 4008, 3176, 40, 488, 3688, 3240,
    4072, 104, 3624, 552, 3304, 168, 3368, 232, 3432, 296, 360, 424, 3056, 2992, 2928, 2864, 2800, 2736, 944, 4016, 3184, 48, 496, 3248, 4080,
    112, 3632, 3312, 176, 3376, 240, 3440, 304, 3504, 368, 432, 3128, 3064, 3000, 2936, 2872, 2808, 2744, 4024, 3192, 56, 3256, 4088, 120, 3320,
    184, 3384, 248, 3448, 312, 3512, 376, 3576, 440, 1793, 1345, 3713, 897, 961, 1025, 1089, 1153, 1217, 1281, 1, 449, 3649, 65, 3585, 513, 129,
    577, 193, 641, 257, 705, 321, 769, 2249, 1801, 1353, 3721, 2697, 905, 969, 1033, 1097, 1161, 1225, 3145, 9, 457, 3657, 4041, 73, 3593, 521,
    137, 585, 201, 649, 265, 713, 329, 777, 3921, 2257, 1809, 1361, 3729, 2769, 2705, 913, 977, 1041, 1105, 1169, 3985, 3153, 17, 465, 3665,
    3217, 4049, 81, 3601, 529, 145, 593, 209, 657, 273, 721, 337, 3929, 2265, 1817, 1369, 3737, 2841, 2777, 2713, 921, 985, 1049, 1113, 3993,
    3161, 25, 473, 3673, 3225, 4057, 89, 3609, 537, 3289, 153, 601, 217, 665, 281, 345, 3937, 2273, 1825, 1377, 3745, 2913, 2849, 2785, 2721, 929, 993, 
    1057, 4001, 3169, 33, 481, 3681, 3233, 4065, 97, 3617, 545, 3297, 161, 609, 3361, 225, 289, 353, 3945, 2281, 1833, 1385, 3753, 2985, 2921, 2857, 
    2793, 2729, 937, 1001, 4009, 3177, 41, 489, 3689, 3241, 4073, 105, 3625, 553, 3305, 169, 3369, 233, 3433, 297, 361, 3953, 2289, 1841, 1393, 3057, 
    2993, 2929, 2865, 2801, 2737, 945, 4017, 3185, 49, 497, 3249, 4081, 113, 3633, 3313, 177, 3377, 241, 3441, 305, 3505, 369, 3961, 2297, 1849, 3129, 
    3065, 3001, 2937, 2873, 2809, 2745, 4025, 3193, 57, 3257, 4089, 121, 3321, 185, 3385, 249, 3449, 313, 3513, 377, 1858, 3778, 1410, 1794, 1346, 
    3714, 898, 962, 1026, 1090, 1154, 1218, 1282, 2, 450, 3650, 66, 3586, 514, 130, 578, 194, 642, 258, 706, 3850, 1866, 3786, 1418, 2250, 1802, 1354, 
    3722, 2698, 906, 970, 1034, 1098, 1162, 1226, 3146, 10, 458, 3658, 4042, 74, 3594, 522, 138, 586, 202, 650, 266, 714, 2322, 3858, 1874, 3794, 1426, 
    3922, 2258, 1810, 1362, 3730, 2770, 2706, 914, 978, 1042, 1106, 1170, 3986, 3154, 18, 466, 3666, 3218, 4050, 82, 3602, 530, 146, 594, 210, 658, 
    274, 722, 2330, 3866, 1882, 3802, 1434, 3930, 2266, 1818, 1370, 3738, 2842, 2778, 2714, 922, 986, 1050, 1114, 3994, 3162, 26, 474, 3674, 3226, 4058, 
    90, 3610, 538, 3290, 154, 602, 218, 666, 282, 2338, 3874, 1890, 3810, 1442, 3938, 2274, 1826, 1378, 3746, 2914, 2850, 2786, 2722, 930, 994, 1058, 
    4002, 3170, 34, 482, 3682, 3234, 4066, 98, 3618, 546, 3298, 162, 610, 3362, 226, 290, 2346, 3882, 1898, 3818, 1450, 3946, 2282, 1834, 1386, 3754, 
    2986, 2922, 2858, 2794, 2730, 938, 1002, 4010, 3178, 42, 490, 3690, 3242, 4074, 106, 3626, 554, 3306, 170, 3370, 234, 3434, 298, 2354, 3890, 1906, 
    3826, 3954, 2290, 1842, 1394, 3058, 2994, 2930, 2866, 2802, 2738, 946, 4018, 3186, 50, 498, 3250, 4082, 114, 3634, 3314, 178, 3378, 242, 3442, 306, 
    2362, 3898, 1914, 3962, 2298, 1850, 3130, 3066, 3002, 2938, 2874, 2810, 2746, 4026, 3194, 58, 3258, 4090, 122, 3322, 186, 3386, 250, 3450, 314, 1923, 
    1475, 1859, 3779, 1411, 1795, 1347, 3715, 899, 963, 1027, 1091, 1155, 1219, 1283, 3, 451, 3651, 67, 3587, 515, 131, 579, 195, 643, 1931, 1483, 3851, 
    1867, 3787, 1419, 2251, 1803, 1355, 3723, 2699, 907, 971, 1035, 1099, 1163, 1227, 3147, 11, 459, 3659, 4043, 75, 3595, 523, 139, 587, 203, 651, 1939, 
    1491, 2323, 3859, 1875, 3795, 1427, 3923, 2259, 1811, 1363, 3731, 2771, 2707, 915, 979, 1043, 1107, 1171, 3987, 3155, 19, 467, 3667, 3219, 4051, 83, 
    3603, 531, 147, 595, 211, 659, 2395, 1947, 1499, 2331, 3867, 1883, 3803, 1435, 3931, 2267, 1819, 1371, 3739, 2843, 2779, 2715, 923, 987, 1051, 1115, 
    3995, 3163, 27, 475, 3675, 3227, 4059, 91, 3611, 539, 3291, 155, 603, 219, 667, 2403, 1955, 1507, 2339, 3875, 1891, 3811, 1443, 3939, 2275, 1827, 1379, 
    3747, 2915, 2851, 2787, 2723, 931, 995, 1059, 4003, 3171, 35, 483, 3683, 3235, 4067, 99, 3619, 547, 3299, 163, 611, 3363, 227, 2411, 1963, 2347, 3883, 
    1899, 3819, 1451, 3947, 2283, 1835, 1387, 3755, 2987, 2923, 2859, 2795, 2731, 939, 1003, 4011, 3179, 43, 491, 3691, 3243, 4075, 107, 3627, 555, 3307, 
    171, 3371, 235, 2419, 1971, 2355, 3891, 1907, 3827, 3955, 2291, 1843, 1395, 3059, 2995, 2931, 2867, 2803, 2739, 947, 4019, 3187, 51, 499, 3251, 4083, 
    115, 3635, 3315, 179, 3379, 243, 2427, 1979, 2363, 3899, 1915, 3963, 2299, 1851, 3131, 3067, 3003, 2939, 2875, 2811, 2747, 4027, 3195, 59, 3259, 4091,
    123, 3323, 187, 3387, 251, 1988, 1540, 1924, 1476, 1860, 3780, 1412, 1796, 1348, 3716, 900, 964, 1028, 1092, 1156, 1220, 1284, 4, 452, 3652, 68, 3588, 
    516, 132, 580, 1996, 1548, 1932, 1484, 3852, 1868, 3788, 1420, 2252, 1804, 1356, 3724, 2700, 908, 972, 1036, 1100, 1164, 1228, 3148, 12, 460, 3660, 
    4044, 76, 3596, 524, 140, 588, 2004, 1556, 1940, 1492, 2324, 3860, 1876, 3796, 1428, 3924, 2260, 1812, 1364, 3732, 2772, 2708, 916, 980, 1044, 1108, 
    1172, 3988, 3156, 20, 468, 3668, 3220, 4052, 84, 3604, 532, 148, 596, 2012, 1564, 2396, 1948, 1500, 2332, 3868, 1884, 3804, 1436, 3932, 2268, 1820, 
    1372, 3740, 2844, 2780, 2716, 924, 988, 1052, 1116, 3996, 3164, 28, 476, 3676, 3228, 4060, 92, 3612, 540, 3292, 156, 604, 2468, 2020, 2404, 1956, 1508, 
    2340, 3876, 1892, 3812, 1444, 3940, 2276, 1828, 1380, 3748, 2916, 2852, 2788, 2724, 932, 996, 1060, 4004, 3172, 36, 484, 3684, 3236, 4068, 100, 3620, 
    548, 3300, 164, 612, 2476, 2028, 2412, 1964, 2348, 3884, 1900, 3820, 1452, 3948, 2284, 1836, 1388, 3756, 2988, 2924, 2860, 2796, 2732, 940, 1004, 4012, 
    3180, 44, 492, 3692, 3244, 4076, 108, 3628, 556, 3308, 172, 2484, 2036, 2420, 1972, 2356, 3892, 1908, 3828, 3956, 2292, 1844, 1396, 3060, 2996, 2932, 
    2868, 2804, 2740, 948, 4020, 3188, 52, 500, 3252, 4084, 116, 3636, 3316, 180, 2492, 2044, 2428, 1980, 2364, 3900, 1916, 3964, 2300, 1852, 3132, 3068, 
    3004, 2940, 2876, 2812, 2748, 4028, 3196, 60, 3260, 4092, 124, 3324, 188, 2053, 1605, 1989, 1541, 1925, 1477, 1861, 3781, 1413, 1797, 1349, 3717, 901, 
    965, 1029, 1093, 1157, 1221, 1285, 5, 453, 3653, 69, 3589, 517, 2061, 1613, 1997, 1549, 1933, 1485, 3853, 1869, 3789, 1421, 2253, 1805, 1357, 3725, 
    2701, 909, 973, 1037, 1101, 1165, 1229, 3149, 13, 461, 3661, 4045, 77, 3597, 525, 2069, 1621, 2005, 1557, 1941, 1493, 2325, 3861, 1877, 3797, 1429, 
    3925, 2261, 1813, 1365, 3733, 2773, 2709, 917, 981, 1045, 1109, 1173, 3989, 3157, 21, 469, 3669, 3221, 4053, 85, 3605, 533, 2077, 2013, 1565, 2397, 
    1949, 1501, 2333, 3869, 1885, 3805, 1437, 3933, 2269, 1821, 1373, 3741, 2845, 2781, 2717, 925, 989, 1053, 1117, 3997, 3165, 29, 477, 3677, 3229, 4061, 
    93, 3613, 541, 2085, 2469, 2021, 2405, 1957, 1509, 2341, 3877, 1893, 3813, 1445, 3941, 2277, 1829, 1381, 3749, 2917, 2853, 2789, 2725, 933, 997, 1061, 
    4005, 3173, 37, 485, 3685, 3237, 4069, 101, 3621, 549, 2541, 2093, 2477, 2029, 2413, 1965, 2349, 3885, 1901, 3821, 1453, 3949, 2285, 1837, 1389, 3757, 
    2989, 2925, 2861, 2797, 2733, 941, 1005, 4013, 3181, 45, 493, 3693, 3245, 4077, 109, 3629, 557, 2549, 2101, 2485, 2037, 2421, 1973, 2357, 3893, 1909, 
    3829, 3957, 2293, 1845, 1397, 3061, 2997, 2933, 2869, 2805, 2741, 949, 4021, 3189, 53, 501, 3253, 4085, 117, 3637, 2557, 2109, 2493, 2045, 2429, 1981, 
    2365, 3901, 1917, 3965, 2301, 1853, 3133, 3069, 3005, 2941, 2877, 2813, 2749, 4029, 3197, 61, 3261, 4093, 125, 2118, 1670, 2054, 1606, 1990, 1542, 1926, 
    1478, 1862, 3782, 1414, 1798, 1350, 3718, 902, 966, 1030, 1094, 1158, 1222, 1286, 6, 454, 3654, 2126, 1678, 2062, 1614, 1998, 1550, 1934, 1486, 3854, 
    1870, 3790, 1422, 2254, 1806, 1358, 3726, 2702, 910, 974, 1038, 1102, 1166, 1230, 3150, 14, 462, 3662, 2134, 2070, 1622, 2006, 1558, 1942, 1494, 2326, 
    3862, 1878, 3798, 1430, 3926, 2262, 1814, 1366, 3734, 2774, 2710, 918, 982, 1046, 1110, 1174, 3990, 3158, 22, 470, 3670, 2142, 2078, 2014, 1566, 2398, 
    1950, 1502, 2334, 3870, 1886, 3806, 1438, 3934, 2270, 1822, 1374, 3742, 2846, 2782, 2718, 926, 990, 1054, 1118, 3998, 3166, 30, 478, 3678, 2150, 2086, 
    2470, 2022, 2406, 1958, 1510, 2342, 3878, 1894, 3814, 1446, 3942, 2278, 1830, 1382, 3750, 2918, 2854, 2790, 2726, 934, 998, 1062, 4006, 3174, 38, 486, 
    3686, 2158, 2542, 2094, 2478, 2030, 2414, 1966, 2350, 3886, 1902, 3822, 1454, 3950, 2286, 1838, 1390, 3758, 2990, 2926, 2862, 2798, 2734, 942, 1006, 
    4014, 3182, 46, 494, 3694, 2614, 2166, 2550, 2102, 2486, 2038, 2422, 1974, 2358, 3894, 1910, 3830, 3958, 2294, 1846, 1398, 3062, 2998, 2934, 2870, 2806, 
    2742, 950, 4022, 3190, 54, 502, 2622, 2174, 2558, 2110, 2494, 2046, 2430, 1982, 2366, 3902, 1918, 3966, 2302, 1854, 3134, 3070, 3006, 2942, 2878, 2814, 
    2750, 4030, 3198, 62, 2183, 1735, 2119, 1671, 2055, 1607, 1991, 1543, 1927, 1479, 1863, 3783, 1415, 1799, 1351, 3719, 903, 967, 1031, 1095, 1159, 1223, 
    1287, 2191, 2127, 1679, 2063, 1615, 1999, 1551, 1935, 1487, 3855, 1871, 3791, 1423, 2255, 1807, 1359, 3727, 2703, 911, 975, 1039, 1103, 1167, 1231, 2199, 
    2135, 2071, 1623, 2007, 1559, 1943, 1495, 2327, 3863, 1879, 3799, 1431, 3927, 2263, 1815, 1367, 3735, 2775, 2711, 919, 983, 1047, 1111, 1175, 2207, 2143, 
    2079, 2015, 1567, 2399, 1951, 1503, 2335, 3871, 1887, 3807, 1439, 3935, 2271, 1823, 1375, 3743, 2847, 2783, 2719, 927, 991, 1055, 1119, 2215, 2151, 2087, 
    2471, 2023, 2407, 1959, 1511, 2343, 3879, 1895, 3815, 1447, 3943, 2279, 1831, 1383, 3751, 2919, 2855, 2791, 2727, 935, 999, 1063, 2223, 2159, 2543, 2095, 
    2479, 2031, 2415, 1967, 2351, 3887, 1903, 3823, 1455, 3951, 2287, 1839, 1391, 3759, 2991, 2927, 2863, 2799, 2735, 943, 1007, 2231, 2615, 2167, 2551, 2103, 
    2487, 2039, 2423, 1975, 2359, 3895, 1911, 3831, 3959, 2295, 1847, 1399, 3063, 2999, 2935, 2871, 2807, 2743, 951, 2687, 2239, 2623, 2175, 2559, 2111, 2495, 
    2047, 2431, 1983, 2367, 3903, 1919, 3967, 2303, 1855, 3135, 3071, 3007, 2943, 2879, 2815, 2751, 4422, 4294, 4358, 4614, 4486, 4550, 4238, 4110, 4174, 4430, 
    4302, 4366, 4622, 4494, 4558, 4246, 4118, 4182, 4438, 4310, 4374, 4630, 4502, 4566, 4254, 4126, 4190, 4446, 4318, 4382, 4638, 4510, 4574, 4262, 4134, 4198, 
    4454, 4326, 4390, 4646, 4518, 4582, 4270, 4142, 4206, 4462, 4334, 4398, 4654, 4526, 4590, 4278, 4150, 4214, 4470, 4342, 4406, 4662, 4534, 4598, 4286, 4158, 
    4222, 4478, 4350, 4414
];

pub fn read_input<F: FieldExt>(prefix: &str, file_name: &str) -> LeelaParams<F> {
    let inputs_raw = std::fs::read_to_string(prefix.to_owned() + file_name).unwrap();
    let inputs = json::parse(&inputs_raw).unwrap();

    let conv_block_input = &inputs["conv_block"];
    let residuals_input = &inputs["residual_stack"];
    let policy_head_input = &inputs["policy_head"];

    let conv_block = {
        let conv_params = get_conv_params(&conv_block_input["conv"]);
        let bn_params = get_bn_params(&conv_block_input["bn"]);

        ConvBlockChipParams {
            conv_params,
            bn_params,
        }
    };

    let residuals = {
        let residuals: Vec<_> = residuals_input
            .entries()
            .map(|(_, residual_input)| {
                let conv_1 = get_conv_params(&residual_input["conv1"]);
                let conv_2 = get_conv_params(&residual_input["conv2"]);
                let bn_1 = get_bn_params(&residual_input["bn1"]);
                let bn_2 = get_bn_params(&residual_input["bn2"]);

                let se_params = {
                    let se_input = &residual_input["se"];
                    let fc_1 = get_fc_params(&se_input["lin1"]);
                    let fc_2 = get_fc_params(&se_input["lin2"]);

                    SqueezeExcitationBlockChipParams {
                        fc_params: [fc_1, fc_2],
                    }
                };

                ResidualBlockChipParams {
                    conv_params: [conv_1, conv_2],
                    bn_params: [bn_1, bn_2],
                    se_params,
                }
            })
            .collect();
        residuals.try_into().unwrap()
    };

    let policy_head = {
        let conv_1_params = get_conv_params(&policy_head_input["conv_block"]["conv"]);
        let conv_2_params = get_conv_params(&policy_head_input["conv"]);
        let bn_params = get_bn_params(&policy_head_input["conv_block"]["bn"]);

        let bias_vec = policy_head_input["conv"]["bias"]
            .members()
            .map(|bias| Value::known(felt_from_i64(bias.as_i64().unwrap())))
            .collect();

        let bias_params = DistributedAddFixedChipParams { scalars: bias_vec };
        PolicyHeadChipParams {
            conv_1_params,
            conv_2_params,
            bn_params,
            bias_params,
            gather_map: GATHER_MAP.to_vec().into(),
        }
    };

    LeelaParams {
        conv_block,
        residuals,
        policy_head,
    }
}

fn get_conv_params<F: FieldExt>(conv_json: &JsonValue) -> Conv3DLayerParams<F> {
    let kernal_dim: Vec<_> = conv_json["weight_shape"]
        .members()
        .map(|dim| dim.as_usize().unwrap())
        .collect();
    let kernal_dim: [usize; 4] = kernal_dim.try_into().unwrap();
    let kernal_vec: Vec<_> = conv_json["weight"]
        .members()
        .map(|weight| Value::known(felt_from_i64(weight.as_i64().unwrap())))
        .collect();
    let conv_kernal = Array::from_shape_vec(kernal_dim, kernal_vec).unwrap();
    Conv3DLayerParams {
        kernals: conv_kernal,
    }
}

fn get_bn_params<F: FieldExt>(bn_json: &JsonValue) -> BatchnormChipParams<F> {
    let coeffs: Vec<_> = bn_json["coeff"][0]
        .members()
        .map(|coeff| Value::known(felt_from_i64(coeff.as_i64().unwrap())))
        .collect();
    let shift: Vec<_> = bn_json["e_x"][0]
        .members()
        .map(|shift| Value::known(felt_from_i64(shift.as_i64().unwrap())))
        .collect();
    let bias: Vec<_> = bn_json["beta"]
        .members()
        .map(|bias| Value::known(felt_from_i64(bias.as_i64().unwrap())))
        .collect();

    let scalars = coeffs
        .iter()
        .zip(shift.iter())
        .zip(bias.iter())
        .map(|((&coeff, &shift), &bias)| (coeff, shift, bias))
        .collect();

    BatchnormChipParams { scalars }
}

fn get_fc_params<F: FieldExt>(fc_json: &JsonValue) -> FcParams<F> {
    let weights: Vec<_> = fc_json["weight"]
        .members()
        .map(|weight| Value::known(felt_from_i64(weight.as_i64().unwrap())))
        .collect();

    let biases: Vec<_> = fc_json["bias"]
        .members()
        .map(|bias| Value::known(felt_from_i64(bias.as_i64().unwrap())))
        .collect();

    FcParams { weights, biases }
}
